Name: Debugger Evasion
Tactic: Defense Evasion
Description:
  Description:
  - Adversaries may employ various means to detect and avoid debuggers. Debuggers
    are typically used by defenders to trace and/or analyze the execution of potential
    malware payloads.[1]Debugger evasion may include changing behaviors based on the
    results of the checks for the presence of artifacts indicative of a debugged environment.
    Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger,
    they may alter their malware to disengage from the victim or conceal the core
    functions of the implant. They may also search for debugger artifacts before dropping
    secondary or additional payloads.Specific checks will vary based on the target
    and/or adversary, but may involve Native API function calls such as IsDebuggerPresent()
    and  NtQueryInformationProcess(), or manually checking the BeingDebugged flag
    of the Process Environment Block (PEB). Other checks for debugging artifacts may
    also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time
    checks, or measurements if exceptions are raised in the current process (assuming
    a present debugger would "swallow" or handle the potential error).[2][3][4]Adversaries
    may use the information learned from these debugger checks during automated discovery
    to shape follow-on behaviors. Debuggers can also be evaded by detaching the process
    or flooding debug logs with meaningless data via messages produced by looping
    Native API function calls such as OutputDebugStringW().[5][6]
Information:
  Sub-techniques: []
  Tactic: Defense Evasion
